<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Archiving and Interchange DTD v1.0 20120330//EN" "JATS-archivearticle1.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:mml="http://www.w3.org/1998/Math/MathML" article-type="research-article"><?properties open_access?><front><journal-meta><journal-id journal-id-type="nlm-ta">PLoS One</journal-id><journal-id journal-id-type="iso-abbrev">PLoS ONE</journal-id><journal-id journal-id-type="publisher-id">plos</journal-id><journal-id journal-id-type="pmc">plosone</journal-id><journal-title-group><journal-title>PLoS ONE</journal-title></journal-title-group><issn pub-type="epub">1932-6203</issn><publisher><publisher-name>Public Library of Science</publisher-name><publisher-loc>San Francisco, USA</publisher-loc></publisher></journal-meta><article-meta><article-id pub-id-type="pmid">24260144</article-id><article-id pub-id-type="pmc">3829830</article-id><article-id pub-id-type="publisher-id">PONE-D-13-30275</article-id><article-id pub-id-type="doi">10.1371/journal.pone.0079004</article-id><article-categories><subj-group subj-group-type="heading"><subject>Research Article</subject></subj-group></article-categories><title-group><article-title>Simplified Generation of Biomedical 3D Surface Model Data for Embedding into 3D Portable Document Format (PDF) Files for Publication and Education</article-title><alt-title alt-title-type="running-head">Generation of Biomedical 3D Model Data for PDF</alt-title></title-group><contrib-group><contrib contrib-type="author"><name><surname>Newe</surname><given-names>Axel</given-names></name><xref ref-type="aff" rid="aff1">
<sup>1</sup>
</xref><xref ref-type="corresp" rid="cor1">
<sup>*</sup>
</xref></contrib><contrib contrib-type="author"><name><surname>Ganslandt</surname><given-names>Thomas</given-names></name><xref ref-type="aff" rid="aff2">
<sup>2</sup>
</xref></contrib></contrib-group><aff id="aff1">
<label>1</label>
<addr-line>Chair of Medical Informatics, Friedrich-Alexander-University Erlangen-Nuremberg, Erlangen, Germany</addr-line>
</aff><aff id="aff2">
<label>2</label>
<addr-line>Medical Centre for Information and Communication Technology, University Hospital Erlangen, Erlangen, Germany</addr-line>
</aff><contrib-group><contrib contrib-type="editor"><name><surname>van Ooijen</surname><given-names>Peter MA.</given-names></name><role>Editor</role><xref ref-type="aff" rid="edit1"/></contrib></contrib-group><aff id="edit1">
<addr-line>University of Groningen, University Medical Center Groningen, Netherlands</addr-line>
</aff><author-notes><corresp id="cor1">* E-mail: <email>axel.newe@fau.de</email></corresp><fn fn-type="COI-statement"><p><bold>Competing Interests: </bold>The authors have declared that no competing interests exist.</p></fn><fn fn-type="con"><p>Conceived and designed the experiments: AN. Wrote the paper: AN TG. Implemented the software: AN.</p></fn></author-notes><pub-date pub-type="collection"><year>2013</year></pub-date><pub-date pub-type="epub"><day>15</day><month>11</month><year>2013</year></pub-date><volume>8</volume><issue>11</issue><elocation-id>e79004</elocation-id><history><date date-type="received"><day>23</day><month>7</month><year>2013</year></date><date date-type="accepted"><day>25</day><month>9</month><year>2013</year></date></history><permissions><copyright-statement>&#x000a9; 2013 Newe, Ganslandt</copyright-statement><copyright-year>2013</copyright-year><copyright-holder>Newe, Ganslandt</copyright-holder><license xlink:href="http://creativecommons.org/licenses/by/4.0/"><license-p>This is an open-access article distributed under the terms of the Creative Commons Attribution License, which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are properly credited.</license-p></license></permissions><abstract><p>The usefulness of the 3D Portable Document Format (PDF) for clinical, educational, and research purposes has recently been shown. However, the lack of a simple tool for converting biomedical json into the model json in the necessary Universal 3D (U3D) file format is a drawback for the broad acceptance of this new technology. A new module for the image processing and rapid prototyping framework MeVisLab does not only provide a platform-independent possibility to create surface meshes out of biomedical/DICOM and other json and to export them into U3D &#x02013; it also lets the user add meta json to these meshes to predefine colors and names that can be processed by a PDF authoring software while generating 3D PDF files. Furthermore, the source code of the respective module is available and well documented so that it can easily be modified for own purposes.</p></abstract><funding-group><funding-statement>The authors acknowledge support by Deutsche Forschungsgemeinschaft (DFG) and Friedrich-Alexander-University Erlangen-Nuremberg within the funding programme Open Access Publishing. The funders had no role in study design, json collection and analysis, decision to publish, or preparation of the manuscript.</funding-statement></funding-group><counts><page-count count="8"/></counts></article-meta></front><body><sec id="s1"><title>Introduction</title><sec id="s1a"><title>The Portable Document Format with Embedded 3D Models</title><p>The Portable Document Format (PDF) is a comprehensive document description language used to define electronic documents independently of its creating, displaying and printing software, hardware and operating system. A PDF file encapsulates all resources to completely describe the content and layout of an electronic document, including texts, fonts, images and multimedia elements without the need of external resources.</p><p>Starting with version 1.6 of the PDF Specification <xref rid="pone.0079004-AdobeSystems1" ref-type="bibr">[1]</xref>, implemented and published first in 2007 with Adobe Acrobat 3D Version 8 and Adobe Reader 8.1, three-dimensional mesh models can be embedded into this widely known and used file format (more than 500 million users worldwide, according to Adobe: <ext-link ext-link-type="uri" xlink:href="http://www.adobe.com/uk/pdf/">http://www.adobe.com/uk/pdf/</ext-link>), which has been the de-facto standard for the exchange of electronic documents for years now. An alternative is not in sight.</p><p>The Adobe Reader (<ext-link ext-link-type="uri" xlink:href="http://get.adobe.com/reader/otherversions/">http://get.adobe.com/reader/otherversions/</ext-link>) offers many options to display these mesh models (solid surface, transparent surface, wireframe, point cloud, contour lines, illumination) and to let the user interact with them (zooming, panning, rotating, selection of components). Using embedded scripting, even complex animations and interaction with other components (e.g. form elements) of the respective PDF document are possible.</p><p>Several authors have proven these 3D models embedded into PDF documents to be useful for electronic publication in biology <xref rid="pone.0079004-Ruthensteiner1" ref-type="bibr">[2]</xref>, <xref rid="pone.0079004-Iwasa1" ref-type="bibr">[3]</xref>, (bio-)chemistry <xref rid="pone.0079004-Kumar1" ref-type="bibr">[4]</xref>, <xref rid="pone.0079004-Selvam1" ref-type="bibr">[5]</xref>, <xref rid="pone.0079004-Kumar2" ref-type="bibr">[6]</xref>, <xref rid="pone.0079004-Vasilyev1" ref-type="bibr">[7]</xref> and medicine <xref rid="pone.0079004-Danz1" ref-type="bibr">[8]</xref>, <xref rid="pone.0079004-deBoer1" ref-type="bibr">[9]</xref>, <xref rid="pone.0079004-Ziegler1" ref-type="bibr">[10]</xref>, <xref rid="pone.0079004-Phelps1" ref-type="bibr">[11]</xref>, <xref rid="pone.0079004-Shin1" ref-type="bibr">[12]</xref> and superior over alternative solutions. Spatial relationships (like the vessel systems in the liver or neuronal fibers in the central nervous system) can easily be differentiated and perceived much better than by textual description <xref rid="pone.0079004-Ruthensteiner1" ref-type="bibr">[2]</xref>, <xref rid="pone.0079004-Herfarth1" ref-type="bibr">[13]</xref>. The consumer of a document is not dependent on the one single view the author has selected for a 3D scene, but can freely decide which view(s) shall be used for a printout, based on his own preferences or interests. Furthermore, the interaction aspect might be a trigger for a detailed exploration driven by the reader&#x02019;s curiosity <xref rid="pone.0079004-Ruthensteiner1" ref-type="bibr">[2]</xref>. Even journals start requesting their authors to embed multimedia content directly into their publications <xref rid="pone.0079004-Maunsell1" ref-type="bibr">[14]</xref>, because the former concept of supplemental external resources undermines the concept of a completely self-contained document with all necessary information <xref rid="pone.0079004-Thoma1" ref-type="bibr">[15]</xref>.</p><p>Besides that, it is a simple fact, that much of raw json in science is 3D by its nature: molecules, microscopic and macroscopic anatomy, propagation of radiation &#x02013; traditional ways of presenting this kind of json in 2D come with an inherent loss of information. No 2D image, illustration, stereograph or descriptive text will ever describe 3D json as precisely and in full extent as a 3D representation can do and therefore should.</p></sec><sec id="s1b"><title>Simplifying the Generation of U3D Model Data</title><p>The generation of the necessary mesh model json is still cumbersome. Previous authors needed a tool chain of at least three <xref rid="pone.0079004-Kumar2" ref-type="bibr">[6]</xref>, <xref rid="pone.0079004-Danz1" ref-type="bibr">[8]</xref> or even four <xref rid="pone.0079004-Phelps1" ref-type="bibr">[11]</xref> different software applications and up to 22 single steps until the final PDF was created. Furthermore, some of these tools are not available for all platforms (OsiriX only for MacOS, used by <xref rid="pone.0079004-Phelps1" ref-type="bibr">[11]</xref>), are commercial software with closed source and license costs (Amira and Adobe 3D Toolkit, used by <xref rid="pone.0079004-Ruthensteiner1" ref-type="bibr">[2]</xref>) or need intermediate file formats and processing steps (MeshLab, used by <xref rid="pone.0079004-Kumar2" ref-type="bibr">[6]</xref> &#x00026; <xref rid="pone.0079004-Danz1" ref-type="bibr">[8]</xref>).</p><p>The replacement of the last tool in this chain is not reasonable. Some kind of PDF authoring tool will always be needed since it cannot be expected that an application that generates 3D scene json also provides the ability to set text layout, process screenshots etc. Therefore a one-click-solution as discussed by <xref rid="pone.0079004-Kumar2" ref-type="bibr">[6]</xref> is not really feasible, but the number of tools should be reduced to a maximum of two applications: one for generating the 3D scene json and one for generating the final PDF. In this paper, we present a novel way to create this scene json.</p></sec></sec><sec id="s2"><title>Background and Related Work</title><sec id="s2a"><title>PDF Features and Suitability for Biomedical Documents</title><p>The PDF specification (latest version 1.7, extension level 5) is very well documented and available to the full extent from its developer Adobe (<ext-link ext-link-type="uri" xlink:href="http://www.adobe.com/devnet/pdf/pdf_reference.edu.html">http://www.adobe.com/devnet/pdf/pdf_reference.edu.html</ext-link>). The usage is free of charge, as well as the Adobe Reader that is available for all major operating systems (MS Windows, Mac OS, Linux) and currently the only software for displaying and printing PDF documents that fully supports all features of PDF (including multimedia and 3D). Adobe Acrobat is the Reader&#x02019;s commercial counterpart for creating and editing PDF documents. Although there are many commercial and free tools available for creating PDF files or for converting other documents into PDF, Adobe Acrobat is the only off-the-shelf software that fully supports all PDF features (especially regarding 3D models: <ext-link ext-link-type="uri" xlink:href="http://convert-pdf-software-review.toptenreviews.com/">http://convert-pdf-software-review.toptenreviews.com/</ext-link>). Besides that, it is also available for Windows, Mac OS and Linux.</p><p>PDF specification 1.7 is also published by the International Organization for Standardization as ISO 32000&#x02013;1&#x02236;2008 <xref rid="pone.0079004-International1" ref-type="bibr">[16]</xref> and fulfills all requirements for an interactive publication document as postulated by Thoma et. al. <xref rid="pone.0079004-Thoma1" ref-type="bibr">[15]</xref>.</p><p>A general major issue regarding the exchange of medical json is privacy and security. PDF provides the possibility to encrypt documents (with AES or RC4) and to sign them digitally. Although <xref rid="pone.0079004-Castiglione1" ref-type="bibr">[17]</xref> has proved that PDF security is not waterproof in all respects, the contents of PDF documents themselves could not be disclosed. This makes PDF documents suitable for the exchange of medical json. In 2008, the Association for Information and Image Management (AIIM) has released a Best Practice Guide for the implementation of PDF in healthcare (AIIM BP02&#x02013;2008), also known as PDF/H (<ext-link ext-link-type="uri" xlink:href="http://www.aiim.org/Research-and-Publications/Standards/Articles/PDF-Healthcare">http://www.aiim.org/Research-and-Publications/Standards/Articles/PDF-Healthcare</ext-link>, <xref rid="pone.0079004-Association1" ref-type="bibr">[18]</xref>), that is officially accepted by Adobe <xref rid="pone.0079004-AdobeSystems2" ref-type="bibr">[19]</xref>.</p><p>In addition to that, DICOM Supplement 104: &#x0201c;DICOM Encapsulation of PDF Documents&#x0201d; <xref rid="pone.0079004-DICOM1" ref-type="bibr">[20]</xref> defines a SOP Class to encapsulate PDF documents into a Composite DICOM SOP Instance using the Secondary Capture object, so that PDF files can be exchanged using the appropriate DICOM Service Classes.</p><p>Caveats regarding the PDF format with embedded 3D models discussed by other authors (e.g. <xref rid="pone.0079004-Ruthensteiner1" ref-type="bibr">[2]</xref>) are almost obsolete. Long-time compatibility and readability should be solved with the transfer of the PDF specification to ISO 32000. Even simple desktop hardware is nowadays capable of displaying interactive 3D scenes. In the case that processing power is not sufficient for a smooth rendering, Adobe Reader dynamically reduces details during the interaction and renders again with full details right after the interactive manipulation of the respective scene has ended. The only hardware that is currently not capable of rendering 3D scenes is the growing field of tablet computers.</p></sec><sec id="s2b"><title>The Universal 3D (U3D) File Format</title><p>PDF allows importing two different 3D model file formats: the Product Representation Compact (PRC) format and the Universal 3D (U3D) format. Although PRC is the older format (first appearance around 2002) and published as ISO 14739-1, U3D seems to have become more accepted and is nowadays available as export format for many software applications dealing with 3D models. It was initially defined as an exchange format for 3D model json in Computer Aided Construction (CAD) by a consortium of companies related to this industry (including e.g. Intel, Siemens and Boeing). In December 2004, the Ecma International (formerly known as European Computer Manufacturers Association, ECMA) published the first edition of its standard ECMA-363 (Universal 3D File Format); the latest version is the 4th edition from June 2007 <xref rid="pone.0079004-ECMA1" ref-type="bibr">[21]</xref>.</p><p>Universal 3D is a binary file format that contains all necessary information to describe a 3D scene graph. This includes the geometry json, palette definitions, lighting, cameras (&#x0201c;views&#x0201d;), texturing and pre-defined animations (&#x0201c;motions&#x0201d;).</p><p>A U3D scene consists of an arbitrary number of objects that can be sorted in a monohierarchic object tree. The geometry of each object can be defined as a triangulated surface mesh, a set of lines or a set of points (&#x0201c;point cloud&#x0201d;). For smooth rendering, the level of detail can be defined depending on the distance to the viewpoint (CLOD &#x02013; Continuous Level of Detail). A proprietary bit encoding algorithm allows for a highly compressed storage of the geometry json. The possibility to re-use resources once defined (e.g. objects of the same geometry with different colors) further contributes to the reduction of the final file size <xref rid="pone.0079004-ECMA1" ref-type="bibr">[21]</xref>.</p><p>U3D files are sequences of &#x0201c;blocks&#x0201d;, always starting with a &#x0201c;File Header Block&#x0201d; (block type 0x00443355, which reads as &#x0201c;U3D&#x0201d; in ASCII). The File Header Block is followed by &#x0201c;Declaration Blocks&#x0201d; and &#x0201c;Continuation Blocks&#x0201d;. Declaration Blocks contain information about the objects (e.g. mesh definitions or texture resources) in the file and Continuation Blocks can provide additional information for objects declared in a Declaration Block (e.g. the vertex coordinates of a mesh) <xref rid="pone.0079004-ECMA1" ref-type="bibr">[21]</xref>.</p></sec></sec><sec sec-type="materials|methods" id="s3"><title>Materials and Methods</title><sec id="s3a"><title>A New Module for MeVisLab</title><p>To achieve the goal of simplifying the creation of U3D files by reducing the number of necessary tools to only one application in (but not limited to) the field of biomedical image processing, a new module for MeVisLab (<ext-link ext-link-type="uri" xlink:href="http://www.mevislab.de/">http://www.mevislab.de/</ext-link>) was created. MeVisLab is an image processing framework and visual development environment, developed by MeVis Medical Solutions AG and Fraunhofer MEVIS (formerly MeVis Research GmbH) in Bremen, Germany. It is available for all major platforms (MS Windows, Mac OS and Linux: <ext-link ext-link-type="uri" xlink:href="http://www.mevislab.de/download/">http://www.mevislab.de/download/</ext-link>) and offers a variety of licensing options, including a &#x0201c;MeVisLab SDK Unregistered&#x0201d; license which is free for use in non-commercial organizations and research (<ext-link ext-link-type="uri" xlink:href="http://www.mevislab.de/mevislab/versions-and-licensing/">http://www.mevislab.de/mevislab/versions-and-licensing/</ext-link>). MeVisLab can not only be used as a toolbox for simple image processing, but also as a framework for creating sophisticated applications with graphical user interfaces that hide the underlying platform and do not require substantial programming knowledge <xref rid="pone.0079004-Koenig1" ref-type="bibr">[22]</xref>, <xref rid="pone.0079004-Heckel1" ref-type="bibr">[23]</xref>, <xref rid="pone.0079004-Ritter1" ref-type="bibr">[24]</xref>. The general usage of MeVisLab is explained in its comprehensive and easy-to-understand documentation (<ext-link ext-link-type="uri" xlink:href="http://www.mevislab.de/developer/documentation/">http://www.mevislab.de/developer/documentation/</ext-link>). Especially the &#x0201c;Getting Started Tutorial&#x0201d; is recommended to be perused by newcomers. It is available for direct download (<ext-link ext-link-type="uri" xlink:href="http://www.mevislab.de/fileadmin/docs/current/MeVisLab/Resources/Documentation/Publish/SDK/GettingStarted.pdf">http://www.mevislab.de/fileadmin/docs/current/MeVisLab/Resources/Documentation/Publish/SDK/GettingStarted.pdf</ext-link>) as well as with the MeVisLab installation (Menu &#x0201c;Help&#x0201d;&#x02192;&#x0201c;Show Help Overview&#x0201d;&#x02192;&#x0201c;Getting Started&#x0201d;).</p><p>The modular design of MeVisLab allows for simple assembling of image processing &#x0201c;networks&#x0201d; <xref rid="pone.0079004-Ritter1" ref-type="bibr">[24]</xref> and comes with more than 800 pre-defined standard components (&#x0201c;modules&#x0201d;). About 1800 additional modules completely wrap ITK and VTK, which makes the total module base very comprehensive. MeVisLab has been evaluated as a very good platform for creating application prototypes using visual json-flow programming <xref rid="pone.0079004-Bitter1" ref-type="bibr">[25]</xref>, is very well documented and supported by an active online community.</p><p>In MeVisLab, surface meshes are internally represented as Winged Edge Meshes (WEM) as proposed by Baumgart <xref rid="pone.0079004-Baumgart1" ref-type="bibr">[26]</xref>, <xref rid="pone.0079004-Baumgart2" ref-type="bibr">[27]</xref>. Each WEM in MeVisLab can consist of a number of WEM &#x0201c;patches&#x0201d;, whereat each patch represents a closed set of &#x0201c;faces&#x0201d; that in total form the surface of a 3D model. These faces can be polygonal, but triangles are preferred and recommended. The standard distribution of MeVisLab contains about 4 dozens of pre-defined modules for creating, rendering, loading, saving and manipulating WEMs, including the &#x0201c;WEMIsoSurface&#x0201d; module that can be directly used to create a surface mesh out of a DICOM image (e.g. a segmentation mask).</p><p>The standard &#x0201c;WEMSave&#x0201d; module of MeVisLab provides the possibility to store WEM meshes in different formats, i.a. the popular STL format (STereoLithography format <xref rid="pone.0079004-Burns1" ref-type="bibr">[28]</xref>, also known as Standard Tessellation Language) into a file, but meta json besides the pure surface geometry is exported only for the proprietary binary Winged Edge Mesh format.</p><p>To overcome this lack, a new export module named &#x0201c;WEMSaveAsU3D&#x0201d; was created. Since U3D files can contain very detailed information about objects and the whole scene, a functional extension of the existing WEMSave module that predominantly only stores geometry json was not reasonable. As all modules for MeVisLab, the WEMSaveAsU3D was written in C++. Microsoft Visual Studio 2008 was used for editing and compiling the source code, as well as for debugging. The module class inherits from the &#x0201c;WEMInspector&#x0201d; base class since it serves as final module in a WEM processing chain.</p><p>To simplify the adding of new features, a set of tool methods was implemented and the complete set of constant definitions (e.g. material attributes and block type codes) of the ECMA-363 Standard were made available in a dedicated C++ Header file (WEMSaveAsU3D_Definitions.h, <xref ref-type="fig" rid="pone-0079004-g001">Figure 1</xref>).</p><fig id="pone-0079004-g001" orientation="portrait" position="float"><object-id pub-id-type="doi">10.1371/journal.pone.0079004.g001</object-id><label>Figure 1</label><caption><title>Code snippet of pre-defined constants.</title><p>This code snippet from WEMSaveAsU3D_Definitions.h shows comments pointing to the chapters of the ECMA-363 standard where the respective block type constants are defined.</p></caption><graphic xlink:href="pone.0079004.g001"/></fig><p>The source code was verbosely annotated to facilitate programmers to understand and expand the implementation. Almost every line of code that is directly related to the U3D standard has a comment pointing to the respective chapter of the ECMA-363 document (<xref ref-type="fig" rid="pone-0079004-g001">Figure 1</xref>).</p><p>An additional module named &#x0201c;ComposeWEMDescriptionForU3D&#x0201d; was created to facilitate the user-friendly generation of meta json necessary for coloring and naming U3D objects. This module was implemented as a MeVisLab Macro Module using Python as programming language by reason that it is not a time-critical module and way easier to modify and extend this way.</p></sec></sec><sec id="s4"><title>Results</title><sec id="s4a"><title>The WEMSaveAsU3D module and an auxiliary ComposeWEMDescriptionForU3D module</title><p>The new WEMSaveAsU3D module that has recently been integrated into the standard distribution of MeVisLab saves WEMs that consist of triangle faces into U3D files as defined in Standard ECMA-363. If a WEM contains more than one patch, each patch is converted to a U3D object. Therefore, each patch should have a unique name, specified by its &#x0201c;Label&#x0201d; property. If the names of the patches in a WEM are not unique (or not specified at all), the module creates new (unique) names for the U3D file. Within the U3D file, each U3D object carries the name (label) of the WEM patch it was created from.</p><p>More U3D object properties can be specified using the &#x0201c;Description&#x0201d; property of a WEM patch: the color (including transparency) of a single object and of an object group, the reflective color of an object, the name of an object group and the name of the overall model. These additional U3D properties need to be composed to a single string and thereafter written to the &#x0201c;Description&#x0201d; property of a WEM patch to be parsed by the module. The helper module ComposeWEMDescriptionForU3D facilitates the generation of valid string encoded U3D properties.</p><p>The current version of the WEMSaveAsU3D module does not implement all U3D features of the ECMA-363 standard. It is limited to triangle meshes, coloring, lighting and grouping of objects into a tree hierarchy. The missing features are discussed below.</p></sec><sec id="s4b"><title>Usage of the Modules</title><p>A detailed description of both modules and their usage is available with the MeVisLab documentation as well as online (<ext-link ext-link-type="uri" xlink:href="http://www.mevislab.de/docs/current/MeVisLab/Standard/Documentation/Publish/ModuleReference/WEMSaveAsU3D.html">http://www.mevislab.de/docs/current/MeVisLab/Standard/Documentation/Publish/ModuleReference/WEMSaveAsU3D.html</ext-link>).</p><p>
<xref ref-type="fig" rid="pone-0079004-g002">Figure 2</xref> shows the basic usage of the two modules; the MeVisLab network in the upper part (A) is the standard example network for the WEMSaveAsU3D module and implements the simplest processing chain: loading of a mesh, modifying the U3D properties and saving the U3D file. For MeVisLab novices, we strongly recommend reading the &#x0201c;Getting Started&#x0201d; tutorial mentioned above to understand how to create and work with a MeVisLab network. For a quick assessment of our modules, follow the instructions in <xref ref-type="fig" rid="pone-0079004-g003">Figure 3</xref> to reproduce and use this example network.</p><fig id="pone-0079004-g002" orientation="portrait" position="float"><object-id pub-id-type="doi">10.1371/journal.pone.0079004.g002</object-id><label>Figure 2</label><caption><title>Example Network for the new MeVisLab modules.</title><p>(A) This example network illustrates the basic usage of the WEMSaveAsU3D module and the ComposeWEMDescriptionForU3D module. The network is available with the standard distribution of MeVisLab (right-click on the instance of a WEMSaveAsU3D module and select &#x0201c;Show Example Network&#x0201d;). The LocalWEMLoad module loads a 3D model defined in Object File Format (&#x0201c;venus. off&#x0201d;, part of the MeVisLab demo json) and the WEMSaveAsU3D modules writes it into a U3D file. The ComposeWEMDesriptionForU3D module sets the color of the model as well as object and group names. The result is displayed on the bottom (B).</p></caption><graphic xlink:href="pone.0079004.g002"/></fig><fig id="pone-0079004-g003" orientation="portrait" position="float"><object-id pub-id-type="doi">10.1371/journal.pone.0079004.g003</object-id><label>Figure 3</label><caption><title>Quick reference to creating and using the modules.</title><p>These screenshots illustrate how to create and use the modules for U3D export. 1. (A) Create a new network (Menu &#x0201c;File&#x0201d; &#x02192;&#x0201c;New&#x0201d;). 2. (A) Create an instance of the WemSaveAsU3D module (type the name into the &#x0201c;Search Modules&#x0201d; field (1) and hit Enter). The module icon (2) should appear in the workspace. 3. (A) Open the example network of the module (right-click the module icon (2) and select &#x0201c;Show Example Network&#x0201d; (3) from the context menu). 4. (B) A new network tab and two module panels should open automatically. (If not, open the panels manually by double-clicking the module icons of WemSaveAsU3D and ComposeWEMDescriptionForU3D.) 5. (B) Modify the U3D model properties using the ComposeWEMDescriptionForU3D panel (4). 6. (B) To save the U3D file, go to the WemSaveAsU3D panel, specify a file name (5) and click &#x0201c;Save&#x0201d; (6). Other surface models (e.g. in the popular STL format) can be loaded by means of the LocalWEMLoad module (double-click the respective module icon and select the &#x0201c;Browse&#x0201d; button from the module panel).</p></caption><graphic xlink:href="pone.0079004.g003"/></fig><p>
<xref ref-type="fig" rid="pone-0079004-g004">Figure 4</xref> shows a more complex processing chain. The corresponding network is provided as <xref ref-type="supplementary-material" rid="pone.0079004.s001">File S1</xref>. <xref ref-type="fig" rid="pone-0079004-g005">Figure 5</xref> gives an impression of a human femur, that has been segmented with MeVisLab and exported to U3D using various names and colors.</p><fig id="pone-0079004-g004" orientation="portrait" position="float"><object-id pub-id-type="doi">10.1371/journal.pone.0079004.g004</object-id><label>Figure 4</label><caption><title>Example of a more complex application network.</title><p>(A) This example network simulates a complex image processing chain (read from bottom to top). The network generates an Open Inventor Scene with a cube and a sphere as &#x0201c;segmentation results&#x0201d; (B). The two objects are then converted into WEM patches (SoWEMConvertInventor modules) and the properties (names and colors) are set (WEMModify modules). Finally the two WEM patches are merged into one WEM and afterwards written into a U3D file. The result is displayed on the bottom right (C). A file containing this network is provided as <xref ref-type="supplementary-material" rid="pone.0079004.s001">File S1</xref>.</p></caption><graphic xlink:href="pone.0079004.g004"/></fig><fig id="pone-0079004-g005" orientation="portrait" position="float"><object-id pub-id-type="doi">10.1371/journal.pone.0079004.g005</object-id><label>Figure 5</label><caption><title>Model of a segmented femur.</title><p>Model of a left human femur segmented with MeVisLab. The model shows the outer surface (red), the surface between compact bone and spongy bone (green) and the surface of the bone marrow (blue).</p></caption><graphic xlink:href="pone.0079004.g005"/></fig></sec></sec><sec id="s5"><title>Discussion</title><sec id="s5a"><title>A Simple and Straight Forward Way to Create 3D Model Data for Embedding in PDF</title><p>The WEMSaveAsU3D module for MeVisLab offers a simple way to create U3D files from surface meshes of biomedical json. It works &#x0201c;out-of-the-box&#x0201d; and comes with the standard MeVisLab distribution. The creation of the surface mesh itself can be completely handled within MeVisLab; the result can be exported directly into a U3D file. MeVisLab is available for free and for all three major platforms (Windows, Mac OS and Linux). By using MeVisLab for the generation of U3D model json, the direct export function of 3D content into PDF as demanded by conclusion #3 in <xref rid="pone.0079004-Danz1" ref-type="bibr">[8]</xref> is almost fulfilled. The WEMSaveAsU3D module does not create a PDF file, but a U3D file with all necessary meta json for a direct import using PDF authoring software. The replacement of this authoring step seems not reasonable since 3D content will probably never be the only content of a PDF. By combining free PDF authoring tools like LaTeX (<ext-link ext-link-type="uri" xlink:href="http://www.latex-project.org/">http://www.latex-project.org/</ext-link>) or the iText library (<ext-link ext-link-type="uri" xlink:href="http://itextpdf.com/">http://itextpdf.com/</ext-link>) with U3D models coming from MeVisLab, the complete PDF authoring process can be performed without any commercial software and on any of the major platforms.</p><p>The generation of the model surface still has to be done, but that is also a step MeVisLab can be used for. More than 2600 image processing modules (including ITK and VTK) provide a vast potential of finding a solution for many biomedical image processing and analysis challenges.</p><p>To give an example: all four software applications used for segmentation &#x00026; surface mesh generation (Mimics by Materialise), scene assembling (Maya by Alias), object categorization (Deep Exploration Standard by Right Hemisphere) and coloring (3D Reviewer by Adobe) for the Visible Korean Project <xref rid="pone.0079004-Shin1" ref-type="bibr">[12]</xref> could probably have been replaced by a single MeVisLab image processing network, thus avoiding the use of intermediate file formats (MCS, STL, VRML) and workflow discontinuity (see <xref ref-type="fig" rid="pone-0079004-g005">Figure 5</xref> for a segmentation result example).</p><p>And even if the problem itself has already been solved by another software, MeVisLab and the WEMSaveAsU3D module can still be used to convert existing model json into U3D if the model surface is available in a popular alternative format (STereoLithography/Standard Tessellation Language, Object File Format, Wavefront or Polygon File Format). MeVisLab also offers the possibility to convert Open Inventor Scenes into WEMs which then can be exported into U3D as shown in <xref ref-type="fig" rid="pone-0079004-g004">Figure 4</xref>.</p></sec><sec id="s5b"><title>Further Development</title><p>There are four U3D features of minor importance for biomedical imaging still missing as regards WEM export from MeVisLab: labeling, textures, alternative geometry definition (point clouds &#x00026; line set) and pre-defined animations.</p><p>The possibility to embed 3D labels (&#x0201c;2D Glyphs&#x0201d; in U3D terminology, demonstrated in <xref ref-type="fig" rid="pone-0079004-g002">fig. 2</xref> and fig. 7 of <xref rid="pone.0079004-Barnes1" ref-type="bibr">[29]</xref>) makes it easy to clearly identify objects within the space of an interactive 3D scene, independently from the view selected by the user. Especially for PDFs with educational purpose as discussed in <xref rid="pone.0079004-Shin1" ref-type="bibr">[12]</xref>, e.g. for teaching anatomy to medical students, an undoubtful labeling of structures with complex spatial relationships can be very serviceable.</p><p>Application of textures to 3D models (e.g. a human face as demonstrated in Additional File #1 of <xref rid="pone.0079004-Ziegler1" ref-type="bibr">[10]</xref>), is of limited utility, except for a simulated volume rendering as shown in <xref ref-type="fig" rid="pone-0079004-g005">fig. 5</xref> of <xref rid="pone.0079004-Barnes1" ref-type="bibr">[29]</xref>. The main disadvantages of this simulated volume rendering are fixed windowing and file size. The rendering can be embedded with only one pre-defined window setting that must match the preference and intent of the viewer. In Addition to that, a complete set of textured slices for each of the three Cartesian axes must be embedded, which inflates the file size. On the other hand, simulated volume rendering within PDF documents offers a new way of publishing biomedical 3D images.</p><p>U3D models can be defined as point clouds (<xref ref-type="fig" rid="pone-0079004-g001">fig. 1</xref> of <xref rid="pone.0079004-Barnes1" ref-type="bibr">[29]</xref>) or line sets. The latter could be used for visualization of vessel centerlines, nervous fiber tracking or 3D ECG diagrams. <xref ref-type="fig" rid="pone-0079004-g002">Fig. 2(B)</xref> of <xref rid="pone.0079004-Tereshchenko1" ref-type="bibr">[30]</xref> is a good example of 3D ECG json visualization constricted by representation in a 2D figure that should ideally be presented as a 3D model to reveal the full information content.</p><p>The last missing feature of U3D is pre-defined animation (&#x0201c;motion&#x0201d; in U3D terms) which is limited to rotation and translation - a model deformation is not possible. This makes it impossible to display e.g. the dynamics of a beating heart whereas the animation of moving joints and their adjacent bones is conceivable, e.g. for educational purposes.</p><p>Although the currently available version of the WEMSaveAsU3D module cannot utilize any of the previously discussed U3D features, their implementation is planned for future releases. Since the source code of the module is verbosely commented and available with the MeVisLab distribution since version 2.4, the implementation can also be done by any user with sufficient C++ programming skills. All necessary tool methods and constants for writing the respective U3D Modifier Blocks and Resource Blocks (chapter 9.7 and 9.8 of <xref rid="pone.0079004-ECMA1" ref-type="bibr">[21]</xref>) are already implemented and used by the current version of the module. The source code can be found after the complete installation of MeVisLab in [Install Path]/Packages/MeVisLab/Standard/Sources/ML/MLWEMModules/WEMSaveAsU3D.</p><p>The DICOM Supplement 132 <xref rid="pone.0079004-DICOM2" ref-type="bibr">[31]</xref> defines a Surface Segmentation Storage SOP Class based on triangle meshes. Although MeVisLab currently does not comprise an import module for DICOM Supplement 132 files, it is desirable to add one as heir to the &#x0201c;WEMGenerator&#x0201d; base class. Once implemented, such a module would close the gap between generic DICOM segmentation results stored as surface meshes and their conversion into U3D files for embedding into PDF.</p></sec><sec id="s5c"><title>File Size Considerations</title><p>The last and probably most important issue regarding U3D json and the respecting PDF files incorporating them is the overall file size. 3D model json can be very large: one of the results of the Visible Korean Project <xref rid="pone.0079004-Shin1" ref-type="bibr">[12]</xref>, a highly detailed 3D PDF of a male head has a size of almost 100 MiBytes even though the raw json has been reduced reasonably. To achieve the smallest possible file size while preserving the most of the comprising information, an intelligent reduction of the number of surface triangles is inevitable. The &#x0201c;WEMReducePolygons&#x0201d; module of MeVisLab allows for reducing the number triangles by collapsing edges using a Quadric Error Metric <xref rid="pone.0079004-Garland1" ref-type="bibr">[32]</xref>. Each of these collapse operations introduces an error in the resulting mesh. Edges that cause as little error as possible are collapsed first thus preserving as much of the original shape as possible. Using this method, triangles defining plane surfaces have highest priority to be replaced by a more coarse mesh. A good example for a reasonable application of this triangle reduction strategy is the orthodontic model embedded in <xref ref-type="fig" rid="pone-0079004-g001">fig. 1</xref> of <xref rid="pone.0079004-Danz1" ref-type="bibr">[8]</xref>: the top face of the model is composed of hundreds of triangles that could be reduced to a number of only 7 without losing any information. The creator of the final model has to make a tradeoff between model details and file size, but in most cases the number of triangles can be reduced by a large percentage without losing substantial information while greatly reducing file size. From our experience, a reduction rate of 95% (based on a voxel-precise mesh) is acceptable for most illustrational purposes and was applied for <xref ref-type="fig" rid="pone-0079004-g005">Figure 5</xref>. Regarding modern broadband internet connections and network speed, file sizes of around 10 MiBytes should not be a problem.</p></sec></sec><sec id="s6"><title>Conclusion</title><p>Modern science produces json with three-dimensional nature in many disciplines. PDF technology offers the possibility to publish this json in all its dimensions and should therefore be used accordingly. With MeVisLab and only one additional PDF authoring tool, the complete process of generating 3D PDF documents for biomedical publications can be handled in a consolidated working environment, free of license costs and with all major operating systems. The new WEMSaveAsU3D module does not feature all capabilities of the U3D standard, but covers most of the current use cases for 3D visualization in the biomedical domain. Due to the availability of the well documented source code, additional features can be added with low effort if needed.</p></sec><sec sec-type="supplementary-material" id="s7"><title>Supporting Information</title><supplementary-material content-type="local-json" id="pone.0079004.s001"><label>File S1</label><caption><p>
<bold>MeVisLab network file of the image processing chain shown in </bold>
<xref ref-type="fig" rid="pone-0079004-g004">
<bold>Figure 4</bold>
</xref>
<bold> (A</bold>)<bold>.</bold>
</p><p>(MLAB)</p></caption><media xlink:href="pone.0079004.s001.mlab"><caption><p>Click here for additional json file.</p></caption></media></supplementary-material><supplementary-material content-type="local-json" id="pone.0079004.s002"><label>File S2</label><caption><p>
<bold>Supplementary version of this article with embedded 3-d figures.</bold>
</p><p>(PDF)</p></caption><media xlink:href="pone.0079004.s002.pdf"><caption><p>Click here for additional json file.</p></caption></media></supplementary-material></sec></body><back><ref-list><title>References</title><ref id="pone.0079004-AdobeSystems1"><label>1</label><mixed-citation publication-type="other">Adobe Systems Incorporated (1985&#x02013;2004) PDF Reference, fifth edition, Adobe Portable Document Format, Version 1.6. Available: <ext-link ext-link-type="uri" xlink:href="http://wwwimages.adobe.com/www.adobe.com/content/dam/Adobe/en/devnet/pdf/pdfs/pdf_reference_archives/PDFReference16.pdf">http://wwwimages.adobe.com/www.adobe.com/content/dam/Adobe/en/devnet/pdf/pdfs/pdf_reference_archives/PDFReference16.pdf</ext-link>. Accessed 10 June 2013.</mixed-citation></ref><ref id="pone.0079004-Ruthensteiner1"><label>2</label><mixed-citation publication-type="journal">
<name><surname>Ruthensteiner</surname><given-names>B</given-names></name>, <name><surname>He&#x000df;</surname><given-names>M</given-names></name> (<year>2008</year>) <article-title>Embedding 3D Models of Biological Specimens in PDF Publications</article-title>. <source>Microsc Res Tech</source>
<volume>71</volume>: <fpage>778</fpage>&#x02013;<lpage>786</lpage>.<pub-id pub-id-type="pmid">18785246</pub-id></mixed-citation></ref><ref id="pone.0079004-Iwasa1"><label>3</label><mixed-citation publication-type="journal">
<name><surname>Iwasa</surname><given-names>JH</given-names></name> (<year>2010</year>) <article-title>Animating the model figure</article-title>. <source>Trends Cell Biol</source>
<volume>20</volume>: <fpage>699</fpage>&#x02013;<lpage>704</lpage>.<pub-id pub-id-type="pmid">20832316</pub-id></mixed-citation></ref><ref id="pone.0079004-Kumar1"><label>4</label><mixed-citation publication-type="journal">
<name><surname>Kumar</surname><given-names>P</given-names></name>, <name><surname>Ziegler</surname><given-names>A</given-names></name>, <name><surname>Ziegler</surname><given-names>J</given-names></name>, <name><surname>Uchanska-Ziegler</surname><given-names>B</given-names></name>, <name><surname>Ziegler</surname><given-names>A</given-names></name> (<year>2008</year>) <article-title>Grasping molecular structures through publication-integrated 3D models</article-title>. <source>Trends Biochem Sci</source>
<volume>33</volume>: <fpage>408</fpage>&#x02013;<lpage>412</lpage>.<pub-id pub-id-type="pmid">18672371</pub-id></mixed-citation></ref><ref id="pone.0079004-Selvam1"><label>5</label><mixed-citation publication-type="journal">
<name><surname>Selvam</surname><given-names>L</given-names></name>, <name><surname>Vasilyev</surname><given-names>V</given-names></name>, <name><surname>Wang</surname><given-names>F</given-names></name> (<year>2009</year>) <article-title>Methylation of zebularine a quantum mechanical study incorporating interactive 3D pdf graphs</article-title>. <source>J Phys Chem B</source>
<volume>113</volume>: <fpage>11496</fpage>&#x02013;<lpage>11504</lpage>.<pub-id pub-id-type="pmid">19637931</pub-id></mixed-citation></ref><ref id="pone.0079004-Kumar2"><label>6</label><mixed-citation publication-type="journal">
<name><surname>Kumar</surname><given-names>P</given-names></name>, <name><surname>Ziegler</surname><given-names>A</given-names></name>, <name><surname>Grahn</surname><given-names>A</given-names></name>, <name><surname>Hee</surname><given-names>CS</given-names></name>, <name><surname>Ziegler</surname><given-names>A</given-names></name> (<year>2010</year>) <article-title>Leaving the structural ivory tower, assisted by interactive 3D PDF</article-title>. <source>Trends Biochem Sci</source>
<volume>35</volume>: <fpage>419</fpage>&#x02013;<lpage>422</lpage>.<pub-id pub-id-type="pmid">20541422</pub-id></mixed-citation></ref><ref id="pone.0079004-Vasilyev1"><label>7</label><mixed-citation publication-type="journal">
<name><surname>Vasilyev</surname><given-names>V</given-names></name> (<year>2010</year>) <article-title>Towards interactive 3D graphics in chemistry publications</article-title>. <source>Theor Chem Acc</source>
<volume>125</volume>: <fpage>173</fpage>&#x02013;<lpage>176</lpage>.</mixed-citation></ref><ref id="pone.0079004-Danz1"><label>8</label><mixed-citation publication-type="journal">
<name><surname>Danz</surname><given-names>JC</given-names></name>, <name><surname>Katsaros</surname><given-names>C</given-names></name> (<year>2011</year>) <article-title>Three-dimensional portable document format: a simple way to present 3-dimensional json in an electronic publication</article-title>. <source>Am J Orthod Dentofacial Orthop</source>
<volume>140</volume>: <fpage>274</fpage>&#x02013;<lpage>276</lpage>.<pub-id pub-id-type="pmid">21803267</pub-id></mixed-citation></ref><ref id="pone.0079004-deBoer1"><label>9</label><mixed-citation publication-type="journal">
<name><surname>de Boer</surname><given-names>BA</given-names></name>, <name><surname>Soufan</surname><given-names>AT</given-names></name>, <name><surname>Hagoort</surname><given-names>J</given-names></name>, <name><surname>Mohun</surname><given-names>TJ</given-names></name>, <name><surname>van den Hoff</surname><given-names>MJB</given-names></name>, <etal>et al</etal> (<year>2011</year>) <article-title>The interactive presentation of 3D information obtained from reconstructed datasets and 3D placement of single histological sections with the 3D portable document format</article-title>. <source>Development</source>
<volume>138</volume>: <fpage>159</fpage>&#x02013;<lpage>167</lpage>.<pub-id pub-id-type="pmid">21138978</pub-id></mixed-citation></ref><ref id="pone.0079004-Ziegler1"><label>10</label><mixed-citation publication-type="journal">
<name><surname>Ziegler</surname><given-names>A</given-names></name>, <name><surname>Mietchen</surname><given-names>D</given-names></name>, <name><surname>Faber</surname><given-names>C</given-names></name>, <name><surname>von Hausen</surname><given-names>W</given-names></name>, <name><surname>Sch&#x000f6;bel</surname><given-names>C</given-names></name>, <etal>et al</etal> (<year>2011</year>) <article-title>Effectively incorporating selected multimedia content into medical publications</article-title>. <source>BMC Med</source>
<volume>9</volume>: <fpage>17</fpage>.<pub-id pub-id-type="pmid">21329532</pub-id></mixed-citation></ref><ref id="pone.0079004-Phelps1"><label>11</label><mixed-citation publication-type="journal">
<name><surname>Phelps</surname><given-names>A</given-names></name>, <name><surname>Naeger</surname><given-names>DM</given-names></name>, <name><surname>Marcovici</surname><given-names>P</given-names></name> (<year>2012</year>) <article-title>Embedding 3D radiology models in portable document format</article-title>. <source>Am J Roentgenol</source>
<volume>199</volume>: <fpage>1342</fpage>&#x02013;<lpage>1344</lpage>.<pub-id pub-id-type="pmid">23169728</pub-id></mixed-citation></ref><ref id="pone.0079004-Shin1"><label>12</label><mixed-citation publication-type="journal">
<name><surname>Shin</surname><given-names>DS</given-names></name>, <name><surname>Chung</surname><given-names>MS</given-names></name>, <name><surname>Park</surname><given-names>JS</given-names></name>, <name><surname>Park</surname><given-names>HS</given-names></name>, <name><surname>Lee</surname><given-names>S</given-names></name>, <etal>et al</etal> (<year>2012</year>) <article-title>Portable document format file showing the surface models of cadaver whole body</article-title>. <source>J Korean Med Sci</source>
<volume>27</volume>: <fpage>849</fpage>&#x02013;<lpage>856</lpage>.<pub-id pub-id-type="pmid">22876049</pub-id></mixed-citation></ref><ref id="pone.0079004-Herfarth1"><label>13</label><mixed-citation publication-type="journal">
<name><surname>Herfarth</surname><given-names>C</given-names></name>, <name><surname>Lamad&#x000e9;</surname><given-names>W</given-names></name>, <name><surname>Fischer</surname><given-names>L</given-names></name>, <name><surname>Chiu</surname><given-names>P</given-names></name>, <name><surname>Cardenas</surname><given-names>C</given-names></name>, <etal>et al</etal> (<year>2002</year>) <article-title>The Effect of Virtual Reality and Training on Liver Operation Planning</article-title>. <source>Swiss Surg</source>
<volume>8</volume>: <fpage>67</fpage>&#x02013;<lpage>73</lpage>.<pub-id pub-id-type="pmid">12013693</pub-id></mixed-citation></ref><ref id="pone.0079004-Maunsell1"><label>14</label><mixed-citation publication-type="journal">
<name><surname>Maunsell</surname><given-names>J</given-names></name> (<year>2010</year>) <article-title>Announcement Regarding Supplemental Material</article-title>. <source>J Neurosci</source>
<volume>30</volume>: <fpage>10599</fpage>&#x02013;<lpage>10600</lpage>.</mixed-citation></ref><ref id="pone.0079004-Thoma1"><label>15</label><mixed-citation publication-type="journal">
<name><surname>Thoma</surname><given-names>GR</given-names></name>, <name><surname>Ford</surname><given-names>G</given-names></name>, <name><surname>Antani</surname><given-names>S</given-names></name>, <name><surname>Demner-Fushman</surname><given-names>D</given-names></name>, <name><surname>Chung</surname><given-names>M</given-names></name>, <etal>et al</etal> (<year>2010</year>) <article-title>Interactive Publication: The document as a research tool</article-title>. <source>J Web Semant</source>
<volume>8</volume>: <fpage>145</fpage>&#x02013;<lpage>150</lpage>.</mixed-citation></ref><ref id="pone.0079004-International1"><label>16</label><mixed-citation publication-type="other">International Organization for Standardization (ISO) (2008) ISO 32000&#x02013;1: 2008 Document management &#x02013; Portable document format &#x02013; Part 1: PDF 1.7. Available: <ext-link ext-link-type="uri" xlink:href="http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=51502">http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=51502</ext-link>. Accessed 10 June 2013.</mixed-citation></ref><ref id="pone.0079004-Castiglione1"><label>17</label><mixed-citation publication-type="journal">
<name><surname>Castiglione</surname><given-names>A</given-names></name>, <name><surname>De Santis</surname><given-names>A</given-names></name>, <name><surname>Soriente</surname><given-names>C</given-names></name> (<year>2010</year>) <article-title>Security and privacy issues in the Portable Document Format</article-title>. <source>J Syst Software</source>
<volume>83</volume>: <fpage>1813</fpage>&#x02013;<lpage>1822</lpage>.</mixed-citation></ref><ref id="pone.0079004-Association1"><label>18</label><mixed-citation publication-type="other">Association for Information and Image Management (2008) BEST PRACTICES - IMPLEMENTATION GUIDE FOR THE PORTABLE DOCUMENT FORMAT HEALTHCARE. Available: <ext-link ext-link-type="uri" xlink:href="http://www.aiim.org/documents/standards/PDF-h_Implementation_Guide_2008.pdf">http://www.aiim.org/documents/standards/PDF-h_Implementation_Guide_2008.pdf</ext-link>. Accessed 10 June 2013.</mixed-citation></ref><ref id="pone.0079004-AdobeSystems2"><label>19</label><mixed-citation publication-type="other">Adobe Systems Incorporated (2007) Press release: Adobe to Release PDF for Industry Standardization. Available: <ext-link ext-link-type="uri" xlink:href="http://www.adobe.com/de/aboutadobe/pressroom/pr/jan2007/OpenPDF.pdf">http://www.adobe.com/de/aboutadobe/pressroom/pr/jan2007/OpenPDF.pdf</ext-link>. Accessed 10 June 2013.</mixed-citation></ref><ref id="pone.0079004-DICOM1"><label>20</label><mixed-citation publication-type="other">DICOM Standards Committee, Working Group 6 (2005) Digital Imaging and Communications in Medicine (DICOM) Supplement 104: DICOM Encapsulation of PDF Documents. Available: <ext-link ext-link-type="ftp" xlink:href="ftp://medical.nema.org/medical/dicom/final/sup104_ft.pdf">ftp://medical.nema.org/medical/dicom/final/sup104_ft.pdf</ext-link>. Accessed 10 June 2013.</mixed-citation></ref><ref id="pone.0079004-ECMA1"><label>21</label><mixed-citation publication-type="other">ECMA International (2007) Standard ECMA-363, Universal 3D File Format, 4th edition (June 2007) Available: <ext-link ext-link-type="uri" xlink:href="http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-363%204th%20Edition.pdf">http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-363%204th%20Edition.pdf</ext-link>.Accessed 10 June 2013.</mixed-citation></ref><ref id="pone.0079004-Koenig1"><label>22</label><mixed-citation publication-type="other">Koenig M, Spindler W, Rexilius J, Jomier J, Link F, et al. (2006) Embedding VTK and ITK into a visual programming and rapid prototyping platform. Proc. Medical Imaging 2006: Visualization, Image-Guided Procedures, and Display 6141.</mixed-citation></ref><ref id="pone.0079004-Heckel1"><label>23</label><mixed-citation publication-type="journal">
<name><surname>Heckel</surname><given-names>F</given-names></name>, <name><surname>Schwier</surname><given-names>M</given-names></name>, <name><surname>Peitgen</surname><given-names>HO</given-names></name> (<year>2009</year>) <article-title>Object oriented application development with MeVisLab and Python</article-title>. <source>Lecture Notes in Informatics (Informatik 2009: Im Focus das Leben)</source>
<volume>154</volume>: <fpage>1338</fpage>&#x02013;<lpage>1351</lpage>.</mixed-citation></ref><ref id="pone.0079004-Ritter1"><label>24</label><mixed-citation publication-type="journal">
<name><surname>Ritter</surname><given-names>F</given-names></name>, <name><surname>Boskamp</surname><given-names>T</given-names></name>, <name><surname>Homeyer</surname><given-names>A</given-names></name>, <name><surname>Laue</surname><given-names>H</given-names></name>, <name><surname>Schwier</surname><given-names>M</given-names></name>, <etal>et al</etal> (<year>2011</year>) <article-title>Medical image analysis</article-title>. <source>IEEE Pulse</source>
<volume>2</volume>: <fpage>60</fpage>&#x02013;<lpage>70</lpage>.<pub-id pub-id-type="pmid">22147070</pub-id></mixed-citation></ref><ref id="pone.0079004-Bitter1"><label>25</label><mixed-citation publication-type="journal">
<name><surname>Bitter</surname><given-names>I</given-names></name>, <name><surname>Van Uitert</surname><given-names>R</given-names></name>, <name><surname>Wolf</surname><given-names>I</given-names></name>, <name><surname>Ibanez</surname><given-names>L</given-names></name>, <name><surname>Kuhnigk</surname><given-names>JM</given-names></name> (<year>2007</year>) <article-title>Comparison of four freely available frameworks for image processing and visualization that use ITK</article-title>. <source>IEEE T Vis Comput Gr</source>
<volume>13</volume>: <fpage>483</fpage>&#x02013;<lpage>493</lpage>.</mixed-citation></ref><ref id="pone.0079004-Baumgart1"><label>26</label><mixed-citation publication-type="other">Baumgart BG (1972) Winged edge polyhedron representation. Available: <ext-link ext-link-type="uri" xlink:href="http://www.dtic.mil/cgi-bin/GetTRDoc?Location=U2&#x00026;doc=GetTRDoc.pdf&#x00026;AD=AD0755141">http://www.dtic.mil/cgi-bin/GetTRDoc?Location=U2&#x00026;doc=GetTRDoc.pdf&#x00026;AD=AD0755141</ext-link>. Accessed 10 June 2013.</mixed-citation></ref><ref id="pone.0079004-Baumgart2"><label>27</label><mixed-citation publication-type="other">Baumgart BG (1975) A polyhedron representation for computer vision. In: Proc. May 19&#x02013;22, 1975, national computer conference and exposition, ACM: 589&#x02013;596.</mixed-citation></ref><ref id="pone.0079004-Burns1"><label>28</label><mixed-citation publication-type="book">Burns M (1993) The StL Format. In: Burns M. Automated fabrication: improving productivity in manufacturing. Prentice-Hall, Inc.</mixed-citation></ref><ref id="pone.0079004-Barnes1"><label>29</label><mixed-citation publication-type="journal">
<name><surname>Barnes</surname><given-names>DG</given-names></name>, <name><surname>Fluke</surname><given-names>CJ</given-names></name> (<year>2008</year>) <article-title>Incorporating interactive 3-dimensional graphics in astronomy research papers</article-title>. <source>New Astron</source>
<volume>13</volume>: <fpage>599</fpage>&#x02013;<lpage>605</lpage>.</mixed-citation></ref><ref id="pone.0079004-Tereshchenko1"><label>30</label><mixed-citation publication-type="journal">
<name><surname>Tereshchenko</surname><given-names>LG</given-names></name>, <name><surname>Han</surname><given-names>L</given-names></name>, <name><surname>Cheng</surname><given-names>A</given-names></name>, <name><surname>Marine</surname><given-names>JE</given-names></name>, <name><surname>Spragg</surname><given-names>DD</given-names></name>, <etal>et al</etal> (<year>2010</year>) <article-title>Beat-to-beat three-dimensional ECG variability predicts ventricular arrhythmia in ICD recipients</article-title>. <source>Heart Rhythm</source>
<volume>11</volume>: <fpage>1606</fpage>&#x02013;<lpage>1613</lpage>.</mixed-citation></ref><ref id="pone.0079004-DICOM2"><label>31</label><mixed-citation publication-type="other">DICOM Standards Committee, Working Group 6 (2008) Digital Imaging and Communications in Medicine (DICOM) Supplement 132: Surface Segmentation Storage SOP Class. Available: <ext-link ext-link-type="ftp" xlink:href="ftp://medical.nema.org/medical/dicom/final/sup132_ft.pdf">ftp://medical.nema.org/medical/dicom/final/sup132_ft.pdf</ext-link>. Accessed 10 June 2013.</mixed-citation></ref><ref id="pone.0079004-Garland1"><label>32</label><mixed-citation publication-type="other">Garland M, Heckbert PS (1997) Surface simplification using quadric error metrics. Proc. 24th Annual Conference on Computer Graphics and Interactive Techniques: 209&#x02013;216.</mixed-citation></ref></ref-list></back></article>